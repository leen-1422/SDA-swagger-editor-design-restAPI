openapi: 3.1.0
info:
  title: E-commerce API
  description: API for e-commerce website
  contact:
    email: leen828@yahoo.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:3001
tags:
  - name: product
    description: Everything about your Products
    externalDocs:
      description: Find out more about products
      url: http://swagger.io
  - name: order
    description: Access to plant store orders
    externalDocs:
      description: Find out more about order
      url: http://swagger.io
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about user
      url: http://swagger.io
  - name: categorie
    description: Operations about categories
    externalDocs:
      description: Find out more about categories
      url: http://swagger.io

paths:
  /products:
    get: 
      tags: 
        - product
      summary: return a list of plants
      parameters: 
        - name: page
          in: query
          schema: 
            type: integer
          required: false
        - name: totalPage
          in: query
          schema: 
            type: integer
          required: false
        - name: sortByPrice
          in: query
          schema: 
            type: string
            enum: 
              - 'low to high'
              - 'high to low'


          required: false

      description: return multiple plants with information
      operationId: getPlant
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
      security:
        - plantstore_auth:
            - write:plants
            - read:plants
    post:
      tags:
        - product
      summary: Add a new plant to the store
      description: Add a new plant to the store
      operationId: addPlant
      requestBody:
        description: Create a new plant in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input
      security:
        - plantstore_auth:
            - write:plants
            - read:plants
    put:
      tags:
        - product
      summary: Update an existing plant
      description: Update an existing plant by Id
      operationId: updatePlant
      requestBody:
        description: Update an existent plant in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Plant not found
        '405':
          description: Validation exception
      security:
        - plantstore_auth:
            - write:plants
            - read:plants
            
  /products/{productId}:
    get:
      tags:
        - product
      summary: Find plant by ID
      description: Returns a single plant
      operationId: getPlantById
      parameters:
        - name: productId
          in: path
          description: ID of plant to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
      security:
        - plantstore_auth:
            - write:plants
            - read:plants
    post:
      tags:
        - product
      summary: Updates a plant in the store with form data
      description: ''
      operationId: updatePlantWithForm
      parameters:
        - name: productId
          in: path
          description: ID of plant that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of plant that needs to be updated
          schema:
            type: string
        - name: image
          in: query
          description: image of plant that needs to be updated
          schema:
            type: string
        - name: description
          in: query
          description: description of plant that needs to be updated
          schema:
            type: string
        - name: categories
          in: query
          description: categories of plant that needs to be updated
          schema:
            type: array
        - name: sizes
          in: query
          description: sizes of plant that needs to be updated
          schema:
            type: array
        - name: price
          in: query
          description: price of plant that needs to be updated
          schema:
            type: integer
      responses:
        '405':
          description: Invalid input
      security:
        - plantstore_auth:
            - write:plants
            - read:plants
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: 'ID of product to delete'
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid product value
      security:
        - plantstore_auth:
            - write:plants
            - read:plants
  /products/findProductByName:
    get:
      tags:
        - product
      summary: Finds plants by name
      operationId: findPlantByName
      parameters:
        - name: search
          in: query
          description: name values that need to be considered for search
          required: true
          schema:
            type: string
           
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
      security:
        - plantstore_auth:
            - write:plants
            - read:plants
  /products/filterByCategory:
    get:
      tags:
        - product
      summary: Finds plants by category
      description: Multiple categories values can be provided with comma separated strings
      operationId: findPlantsByCategory
      parameters:
        - name: filterCategory
          in: query
          description: category values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: all categories
            enum:
              - all categories
              - Gymnosperms
              - Angiosperms
              - Perennials
              - Shrubs
              - Ferns
              - Pteridophytes
              - Annuals
              - Aquatic plants
              - Biennials
              - seed bearing

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
      security:
        - plantstore_auth:
            - write:plants
            - read:plants


  /users:
    get: 
      tags:
        - user
      summary: return a list of users
      description: return multiple users with information
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user Id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '401':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

  /orders:
    get: 
      tags:
        - order
      summary: return a list of orders
      description: return users orders with information
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
    post:
      tags:
        - order
      summary: Create order
      requestBody:
        description: Created order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{orderId}:
    get:
      tags:
        - order
      summary: Get order by order Id
      description: ''
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order supplied
        '404':
          description: order not found
    put:
      tags:
        - user
      summary: Update order
      parameters:
        - name: orderId
          in: path
          description: id that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete Order
      parameters:
        - name: orderId
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid Order supplied
        '404':
          description: Order not found

  /categories:
    get: 
      tags:
        - categorie
      summary: return a list of categories
      description: return multiple categories with information
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Invalid status value
    post:
      tags:
        - categorie
      summary: Create category
      description: Create a new category.
      operationId: createCategory
      requestBody:
        description: Created category object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
  /categories/{categoryId}:
    get:
      tags:
        - categorie
      summary: Get category by category Id
      description: ''
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid category supplied
        '404':
          description: category not found
    put:
      tags:
        - categorie
      summary: Update user
      description: update already existing category.
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          description: categorie that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent category in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - categorie
      summary: Delete Category
      description: delete existing Category.
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: The Category that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid Category supplied
        '404':
          description: Category not found

    

components:
  schemas:
    Order:
      type: object
      required: 
        - productId
        - userId
        - purchasedAt
        - products
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        productId:
          type: integer
          format: int64
          examples: [1]
        userId:
          type: integer
          format: int32
          examples: [1]
        purchasedAt:
          type: string
          examples: [2023-09-19T11:30:00]
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      xml:
        name: order

    Category:
      type: object
      required: 
        - name
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        name:
          type: string
          examples: [Gymnosperms]
      xml:
        name: category
    User:
      type: object
      required: 
        - firstName
        - lastName
        - email
        - password
        - role
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        firstName:
          type: string
          examples: [John]
        lastName:
          type: string
          examples: [Doe]
        email:
          type: string
          examples: [john.doe@example.com]
        password:
          type: string
          examples: ['123']
        role:
          type: string
          examples: ['admin']
      xml:
        name: user
    Product:
      type: object
      required: 
        - name
        - description
        - variants
        - sizes
        - price
      properties:
        id:
          type: integer
          description: id of the products
          format: int64
          examples: [1]
        name:
          type: string
          examples: [Cactus]
        image:
          type: string
          examples: [src/images/products/galina-n-miziNqvJx5M-unsplashll.jpg]
        description:
          type: string
          examples: [Cacti are widely cultivated as ornamentals...]
        categories:
          $ref: '#/components/schemas/Category'
        variants:
          type: array
          description: Order Status
          items:
            type: integer
            examples:
              - 1
              - 2
        sizes:
          type: array
          description: Order Status
          items:
            type: string
            examples: 
              - 13-inch
              - 15-inch
        price:
          type: integer
          description: Order Status
          examples: [34]
      xml:
        name: product
      



